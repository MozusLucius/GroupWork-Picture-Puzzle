import javax.sound.sampled.*;
import java.io.File;
import java.io.IOException;

public class Tunog {
    private static Clip sound1, sound2, sound3, sound4, sound5, sound6, sound7, sound8;
    private static boolean muted1 = false; //bgm
    private static boolean muted2 = false; //play bgm
    private static boolean muted3 = false; //buttons
    private static boolean muted4 = false; //play buttons
    private static boolean muted5 = false; //fail
    private static boolean muted6 = false; //solved
    private static boolean muted7 = false; //win
    private static boolean muted8 = false; //boss

    static boolean isMute = false;
    static FloatControl fc;
    /*
    playBGMusic         = the background music
    stopBGMusic         = stops bg music
    pauseBGMusic        = pauses bg music
    resumeBGMusic       = resumes bg music
    toggleMute          = to mute music

    playPGMusic         = the bg music when player is playing
    stopPGMusic         = stops bg music
    pausePGMusic        = pauses bg music
    resumePGMusic       = resumes bg music
    togglePGMute        = to mute music

    playBMusic          = the sound for every button except play buttons
    toggleBMute         = to turn off/mute buttons sound
    toggleBUnmute       = to turn back on the muted buttons sound

    playPBMusic         = the sound for play buttons
    togglePBMute         = to turn off/mute play buttons sound
    togglePBUnmute       = to turn back on the muted play buttons sound

    playFailMusic       = the sound when time limit is reached and puzzle is unsolved
    toggleFailMute         = to turn off/mute failed sound
    toggleFailUnmute       = to turn back on the muted failed sound

    playSolvedMusic     = the sound when a puzzle is solved
    toggleSolvedMute         = to turn off/mute solved sound
    toggleSolvedUnmute       = to turn back on the muted solved sound

    playBossMusic        = sound to play when player beats all levels
    stopBossMusic         = stops win music
    pauseBossMusic        = pauses win music
    resumeBossMusic       = resumes win music
    toggleBossMute        = to mute winmusic

    playWinMusic        = sound to play when player beats all levels
    stopWinMusic         = stops win music
    pauseWinMusic        = pauses win music
    resumeWinMusic       = resumes win music
    toggleWinMute        = to mute winmusic

     */
    //PLAY
    // Initialize and play the music if not already playing
    public static void playBGMusic() {
        if (sound1 == null || !sound1.isRunning()) {
            try {
                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Zen.wav"));
                sound1 = AudioSystem.getClip();
                sound1.open(audioInput);
                sound1.loop(sound1.LOOP_CONTINUOUSLY); // Loop the music
                if (!muted1) {
                    // Play the button sound
                    sound1.start();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    // Stop and release resources
    public static void stopBGMusic() { if(sound1 != null){ sound1.stop(); sound1.close(); }}
    // Pause the music
    public static void pauseBGMusic() { if(sound1 != null && sound1.isRunning()) { sound1.stop(); }}
    // Resume the music
    public static void resumeBGMusic() { if (sound1 != null && !sound1.isRunning()) { sound1.start();}}
    public static void toggleBGMute() {
        if (sound1 != null) {
            System.out.println("BG music mute: "+ muted1);
            FloatControl volume = (FloatControl) sound1.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted1){ volume.setValue(-80.0f); muted1 = true; }
        }
    }
    public static void toggleBGUnmute() {
        System.out.println("BG music mute: "+ muted1);
        if (sound1 != null) {
            FloatControl volume = (FloatControl) sound1.getControl(FloatControl.Type.MASTER_GAIN);
            if (muted1){ volume.setValue(0.0f); muted1 = false; }
        }
    }

    //Playground Background
    public static void playPGMusic() {
        System.out.println("entered playPGMusic");
        if (sound2 == null || !sound2.isRunning()) {
            try {
                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Zen.wav"));
                sound2 = AudioSystem.getClip();
                sound2.open(audioInput);
                sound2.loop(sound2.LOOP_CONTINUOUSLY); // Loop the music
                if (!muted2) {
                    // Play the button sound
                    sound2.start();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    // Stop and release resources
    public static void stopPGMusic() { if(sound2 != null){ sound2.stop(); sound2.close(); }}
    // Pause the music
    public static void pausePGMusic() { if(sound2 != null && sound2.isRunning()) { sound2.stop(); }}
    // Resume the music
    public static void resumePGMusic() { if (sound2 != null && !sound2.isRunning()) { sound2.start();}}
    public static void togglePGMute() {
        if (sound2 != null) {
            FloatControl volume = (FloatControl) sound2.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted2){ volume.setValue(-80.0f); muted2 = true; }
        }
    }
    public static void togglePGUnmute() {
        if (sound2 != null) {
            FloatControl volume = (FloatControl) sound2.getControl(FloatControl.Type.MASTER_GAIN);
            if (muted2){ volume.setValue(0.0f); muted2 = false; }
        }
    }

    //playBMusic
    public static void playBMusic() {
        try {
            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Hard click.wav"));
            sound3 = AudioSystem.getClip();
            sound3.open(audioInput);
            if (!muted3) {
                // Play the button sound
                sound3.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void toggleBMute() {
        System.out.println("Entered toggleBMute: "+ muted3);
        if (sound3 != null) {
            FloatControl volume = (FloatControl) sound3.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted3) { volume.setValue(-80.0f); muted3 = true; System.out.println("Button mute: "+ muted3);}
        }
    }
    public static void toggleBUnmute() {
        if (sound3 != null) {
            FloatControl volume = (FloatControl) sound3.getControl(FloatControl.Type.MASTER_GAIN);
            if (muted3){ volume.setValue(0.0f); muted3 = false; System.out.println("Button mute: "+ muted3);}
        }
    }

    //playPBMusic
    public static void playPBMusic() {
        try {
            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Switch.wav"));
            sound4 = AudioSystem.getClip();
            sound4.open(audioInput);
            if (!muted4) {
                // Play the button sound
                sound4.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void togglePBMute() {
        if (sound4 != null) {
            FloatControl volume = (FloatControl) sound4.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted4) { volume.setValue(-80.0f); muted4 = true; }
        }
    }
    public static void togglePBUnmute() {
        if (sound4 != null) {
            FloatControl volume = (FloatControl) sound4.getControl(FloatControl.Type.MASTER_GAIN);
            if (muted4){ volume.setValue(0.0f); muted4 = false; }
        }
    }

    //playFailMusic
    public static void playFailMusic() {
        System.out.println("play Fail music: "+ muted5);
        try {
            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Fail.wav"));
            sound5 = AudioSystem.getClip();
            sound5.open(audioInput);
            if (!muted5) {
                // Play the button sound
                sound5.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void toggleFailMute() {
        System.out.println("Fail music mute: "+ muted5);
        if (sound5 != null) {
            FloatControl volume = (FloatControl) sound5.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted5) { volume.setValue(-80.0f); muted5 = true; }
        }
    }
    public static void toggleFailUnmute() {
        System.out.println("Fail music Unmute: "+ muted5);
        if (sound5 != null) {
            FloatControl volume = (FloatControl) sound5.getControl(FloatControl.Type.MASTER_GAIN);
            if (muted5){ volume.setValue(0.0f); muted5 = false; }
        }
    }

    //playSolvedMusic
    public static void playSolvedMusic() {
        try {
            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Complete.wav"));
            sound6 = AudioSystem.getClip();
            sound6.open(audioInput);
            if (!muted6) {
                // Play the button sound
                sound6.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void toggleSolvedMute() {
        if (sound6 != null) {
            FloatControl volume = (FloatControl) sound6.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted6) { volume.setValue(-80.0f); muted6 = true; }
        }
    }
    public static void toggleSolvedUnmute() {
        if (sound6 != null) {
            FloatControl volume = (FloatControl) sound6.getControl(FloatControl.Type.MASTER_GAIN);
            if (muted6){ volume.setValue(0.0f); muted6 = false; }
        }
    }


    public static void playBossMusic() {
        if (sound8 == null || !sound8.isRunning()) {
            try {
                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Mingol.wav"));
                sound8 = AudioSystem.getClip();
                sound8.open(audioInput);
                sound8.loop(sound8.LOOP_CONTINUOUSLY); // Loop the music
                if (!muted8) {
                    // Play the button sound
                    sound8.start();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    // Stop and release resources
    public static void stopBossMusic() { if(sound8 != null){ sound8.stop(); sound8.close(); }}
    // Pause the music
    public static void pauseBossMusic() { if(sound8 != null && sound8.isRunning()) { sound8.stop(); }}
    // Resume the music
    public static void resumeBossMusic() { if (sound8 != null && !sound8.isRunning()) { sound8.start();}}
    public static void toggleBossMute() {
        if (sound8 != null) {
            System.out.println("Boss music mute: "+ muted8);
            FloatControl volume = (FloatControl) sound8.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted8){ volume.setValue(-80.0f); muted8 = true; }
        }
    }
    public static void toggleBossUnmute() {
        System.out.println("Boss music mute: "+ muted8);
        if (sound8 != null) {
            FloatControl volume = (FloatControl) sound8.getControl(FloatControl.Type.MASTER_GAIN);
            if (muted8){ volume.setValue(0.0f); muted8 = false; }
        }
    }


    //playWinMusic
    public static void playWinMusic() {
        if (sound7 == null || !sound7.isRunning()) {
            try {
                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Driftveil.wav"));
                sound7 = AudioSystem.getClip();
                sound7.open(audioInput);
                sound7.loop(Clip.LOOP_CONTINUOUSLY);
                if (!muted7) {
                    // Play the button sound
                    sound7.start();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    // Stop and release resources
    public static void stopWinMusic() {System.out.println("Entered stopWinMusic"); if(sound7 != null){ sound7.stop(); sound7.close(); }}
    // Pause the music
    public static void pauseWinMusic() { if(sound7 != null && sound7.isRunning()) { sound7.stop(); }}
    // Resume the music
    public static void resumeWinMusic() { if (sound7 != null && !sound7.isRunning()) { sound7.start();}}
    public static void toggleWinMute() {
        System.out.println("Entered toggleWinMute: "+ muted7);
        if (sound7 != null) {
            FloatControl volume = (FloatControl) sound7.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted7){ volume.setValue(-80.0f); muted7 = true; System.out.println("Win music mute: "+ muted7);}
        }
    }
    public static void toggleWinUnmute() {
        if (sound7 != null) {
            FloatControl volume = (FloatControl) sound7.getControl(FloatControl.Type.MASTER_GAIN);
            if (muted7) {
                volume.setValue(0.0f);
                muted7 = false;
                System.out.println("Win music unmute: " + muted7);
            }
        }
    }
//    public static void toggleWinMute() {
//        if (sound7 != null) {
//            FloatControl volume = (FloatControl) sound7.getControl(FloatControl.Type.MASTER_GAIN);
//            if (!muted7) {
//                volume.setValue(-80.0f); // Mute
//            } else {
//                volume.setValue(0.0f); // Full volume
//            }
//            muted7 = !muted7;
//        }
//    }

}

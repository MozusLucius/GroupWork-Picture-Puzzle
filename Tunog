import javax.sound.sampled.*;
import java.io.File;
import java.io.IOException;

public class Tunog {
    private static Clip sound1, sound2, sound3, sound4, sound5, sound6, sound7, sound8;
    static boolean muted1 = false; //bgm
    static boolean muted2 = false; //play bgm
    static boolean muted3 = false; //buttons
    static boolean muted4 = false; //play buttons
    static boolean muted5 = false; //fail
    static boolean muted6 = false; //solved
    static boolean muted7 = false; //win
    static boolean muted8 = false; //boss
    static FloatControl volume1, volume2, volume3, volume4, volume5, volume6, volume7, volume8;
    /*
    playBGMusic         = the background music
    stopBGMusic         = stops bg music
    pauseBGMusic        = pauses bg music
    resumeBGMusic       = resumes bg music
    toggleBGMute        = to mute music

    playPGMusic         = the bg music when player is playing
    stopPGMusic         = stops bg music
    pausePGMusic        = pauses bg music
    resumePGMusic       = resumes bg music
    togglePGMute        = to mute music

    playBMusic          = the sound for every button except play buttons
    toggleBMute         = to turn off/mute buttons sound

    playPBMusic         = the sound for play buttons
    togglePBMute         = to turn off/mute play buttons sound

    playFailMusic       = the sound when time limit is reached and puzzle is unsolved
    toggleFailMute         = to turn off/mute failed sound

    playSolvedMusic     = the sound when a puzzle is solved
    toggleSolvedMute         = to turn off/mute solved sound

    playBossMusic        = sound to play when player beats all levels
    stopBossMusic         = stops win music
    pauseBossMusic        = pauses win music
    resumeBossMusic       = resumes win music
    toggleBossMute        = to mute winmusic

    playWinMusic        = sound to play when player beats all levels
    stopWinMusic         = stops win music
    pauseWinMusic        = pauses win music
    resumeWinMusic       = resumes win music
    toggleWinMute        = to mute winmusic

     */
    //PLAY
    // Initialize and play the music if not already playing
    //Main Music
    public static void playBGMusic() {
        if (sound1 == null || !sound1.isRunning()) {
            try {
                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Main Theme.wav"));
                sound1 = AudioSystem.getClip();
                sound1.open(audioInput);
                volume1 = (FloatControl) sound1.getControl(FloatControl.Type.MASTER_GAIN);
                volume1.setValue(volume1.getMaximum());
                sound1.loop(sound1.LOOP_CONTINUOUSLY); // Loop the music
                if (!muted1) {
                    // Play the button sound
                    sound1.start();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (muted1) {
            System.out.println("Entered muted 1 if");
            sound1.start();
            volume1.setValue(volume1.getMinimum());
        }
    }
    // Stop and release resources
    public static void stopBGMusic() { if(sound1 != null){ sound1.stop(); sound1.close(); }}
    // Pause the music
    public static void pauseBGMusic() { if(sound1 != null && sound1.isRunning()) { sound1.stop(); }}
    // Resume the music
    public static void resumeBGMusic() { if (sound1 != null && !sound1.isRunning()) { sound1.start();}}
    public static void toggleBGMute() {
        if (!muted1){
            volume1.setValue(volume1.getMinimum());
            muted1 = true;
        } else {
            volume1.setValue(volume1.getMaximum());
            muted1 = false;
        }
    }

    //Playground Background
    public static void playPGMusic() {
        if (sound2 == null || !sound2.isRunning()) {
            try {
                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Zen.wav"));
                sound2 = AudioSystem.getClip();
                sound2.open(audioInput);
                volume2 = (FloatControl) sound2.getControl(FloatControl.Type.MASTER_GAIN);
                sound2.loop(Clip.LOOP_CONTINUOUSLY); // Loop the music
                if (!muted2) {
                    // Play the button sound
                    sound2.start();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (muted2) {
            sound2.start();
            volume2.setValue(volume2.getMinimum());
        }
    }
    // Stop and release resources
    public static void stopPGMusic() { if(sound2 != null){ sound2.stop(); sound2.close(); }}
    // Pause the music
    public static void pausePGMusic() { if(sound2 != null && sound2.isRunning()) { sound2.stop(); }}
    // Resume the music
    public static void resumePGMusic() { if (sound2 != null && !sound2.isRunning()) { sound2.start();}}
    public static void togglePGMute() {
        if (!muted2){
            volume2.setValue(volume2.getMinimum());
            muted2 = true;
        } else {
            volume2.setValue(volume2.getMaximum());
            muted2 = false;
        }
    }

    //playBMusic
    public static void playBMusic() {
        try {
            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Hard click.wav"));
            sound3 = AudioSystem.getClip();
            sound3.open(audioInput);
            volume3 = (FloatControl) sound3.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted3) {
                // Play the button sound
                sound3.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void toggleBMute() {
        if (!muted3){
            volume3.setValue(volume3.getMinimum());
            muted3 = true;
        } else {
            volume3.setValue(volume3.getMaximum());
            muted3 = false;
        }
    }

    //playPBMusic
    public static void playPBMusic() {
        try {
            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Switch.wav"));
            sound4 = AudioSystem.getClip();
            sound4.open(audioInput);
            volume4 = (FloatControl) sound4.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted4) {
                // Play the button sound
                sound4.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void togglePBMute() {
        if (!muted4){
            volume4.setValue(volume4.getMinimum());
            muted4 = true;
        } else {
            volume4.setValue(volume4.getMaximum());
            muted4 = false;
        }
    }

    //playFailMusic
    public static void playFailMusic() {
        try {
            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Fail.wav"));
            sound5 = AudioSystem.getClip();
            sound5.open(audioInput);
            volume5 = (FloatControl) sound5.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted5) {
                // Play the button sound
                sound5.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void toggleFailMute() {
        if (!muted5){
            volume5.setValue(volume5.getMinimum());
            muted5 = true;
        } else {
            volume5.setValue(volume5.getMaximum());
            muted5 = false;
        }
    }

    //playSolvedMusic
    public static void playSolvedMusic() {
        try {
            AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Complete.wav"));
            sound6 = AudioSystem.getClip();
            sound6.open(audioInput);
            volume6 = (FloatControl) sound6.getControl(FloatControl.Type.MASTER_GAIN);
            if (!muted6) {
                // Play the button sound
                sound6.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void toggleSolvedMute() {
        if (!muted6){
            volume6.setValue(volume6.getMinimum());
            muted6 = true;
        } else {
            volume6.setValue(volume6.getMaximum());
            muted6 = false;
        }
    }


    public static void playBossMusic() {
        if (sound8 == null || !sound8.isRunning()) {
            try {
                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Mingol.wav"));
                sound8 = AudioSystem.getClip();
                sound8.open(audioInput);
                volume8 = (FloatControl) sound8.getControl(FloatControl.Type.MASTER_GAIN);
                sound8.loop(sound8.LOOP_CONTINUOUSLY); // Loop the music
                if (!muted8) {
                    // Play the button sound
                    sound8.start();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        if (muted8) {
            sound8.start();
            volume8.setValue(volume8.getMinimum());
        }
    }
    // Stop and release resources
    public static void stopBossMusic() { if(sound8 != null){ sound8.stop(); sound8.close(); }}
    // Pause the music
    public static void pauseBossMusic() { if(sound8 != null && sound8.isRunning()) { sound8.stop(); }}
    // Resume the music
    public static void resumeBossMusic() { if (sound8 != null && !sound8.isRunning()) { sound8.start();}}
    public static void toggleBossMute() {
        if (!muted8){
            volume8.setValue(volume8.getMinimum());
            muted8 = true;
        } else {
            volume8.setValue(volume8.getMaximum());
            muted8 = false;
        }
    }


    //playWinMusic
    public static void playWinMusic() {
        if (sound7 == null || !sound7.isRunning()) {
            try {
                AudioInputStream audioInput = AudioSystem.getAudioInputStream(new File("src\\Coding\\Musika\\Driftveil.wav"));
                sound7 = AudioSystem.getClip();
                sound7.open(audioInput);
                volume7 = (FloatControl) sound7.getControl(FloatControl.Type.MASTER_GAIN);
                sound7.loop(Clip.LOOP_CONTINUOUSLY);
                if (!muted7) {
                    // Play the button sound
                    sound7.start();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (muted7) {
            sound7.start();
            volume7.setValue(volume7.getMinimum());
        }
    }
    // Stop and release resources
    public static void stopWinMusic() { if(sound7 != null){ sound7.stop(); sound7.close(); }}
    // Pause the music
    public static void pauseWinMusic() { if(sound7 != null && sound7.isRunning()) { sound7.stop(); }}
    // Resume the music
    public static void resumeWinMusic() { if (sound7 != null && !sound7.isRunning()) { sound7.start();}}
    public static void toggleWinMute() {
        if (!muted7){
            volume7.setValue(volume7.getMinimum());
            muted7 = true;
        } else {
            volume7.setValue(volume7.getMaximum());
            muted7 = false;
        }
    }
}

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Settings extends JFrame implements ActionListener {

    Icon picMute = new ImageIcon("src/Coding/Musika/Sounds/no saund.png");
    Icon picNotMute = new ImageIcon("src/Coding/Musika/Sounds/BOLYUME AP.png");
    JLabel bg, buttons, playB, fail, complete, forBack;
    JPanel mainCon, forMenu, con, forTitle, con1;
    JButton mainM,
            bgMute,
            buttonsMute,
            pBMute,
            fMute,
            cMute;

    Settings() {
        forBack = new JLabel(new ImageIcon("src\\Coding\\GIF\\SETTINGS.gif"));
        forBack.setLayout(new BorderLayout());

        this.setTitle("Piczzle");
        ImageIcon piku = new ImageIcon("src\\Coding\\piku.png");
        setExtendedState(MAXIMIZED_BOTH);
        this.setIconImage(piku.getImage());
        this.setSize(1460, 760);
        this.setLocation(190, 90);
        this.setResizable(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.getContentPane().setBackground(new Color(0xf5b982));
        this.setLayout(new BorderLayout());
        mainCon = new JPanel(new BorderLayout(0,0)); mainCon.setOpaque(false);
        con = new JPanel(new BorderLayout()); con.setOpaque(false);

        forMenu = new JPanel(new FlowLayout(FlowLayout.LEADING));
        forMenu.setOpaque(false); forMenu.setPreferredSize(new Dimension(10,55));
        mainM = new JButton(new ImageIcon("src/Coding/Buttons/back1.png"));
        mainM.setPreferredSize(new Dimension(80,51));
        mainM.setBorderPainted(false); mainM.setContentAreaFilled(false); mainM.setFocusPainted(false);
        mainM.addActionListener(this);
        //title
        forTitle = new JPanel(new FlowLayout()); forTitle.setOpaque(false);
        forMenu.add(mainM);
        con.add(forTitle, BorderLayout.NORTH);

        JPanel column1 = new JPanel(new GridLayout(2,1)); column1.setBackground(Color.CYAN); column1.setPreferredSize(new Dimension(200,200));
        con.add(column1, BorderLayout.CENTER);
        con1 = new JPanel(new GridLayout(2,2)); con1.setOpaque(false); con1.setPreferredSize(new Dimension(200,500));
        JPanel column2 = new JPanel(new GridLayout(2,1)); JPanel column3 = new JPanel(new GridLayout(2,1));
        JPanel column4 = new JPanel(new GridLayout(2,1)); JPanel column5 = new JPanel(new GridLayout(2,1));
        column1.setOpaque(false); column2.setOpaque(false); column3.setOpaque(false); column4.setOpaque(false); column5.setOpaque(false);
        con1.add(column2); con1.add(column3); con1.add(column4); con1.add(column5);

        //Column 1-A
        JPanel column1A = new JPanel(new FlowLayout(FlowLayout.CENTER, 20,60)); column1A.setOpaque(false);
        bg = new JLabel("Background Music"); bg.setFont(new Font("Cooper Black", Font.BOLD, 34)); bg.setForeground(Color.WHITE);
        column1A.add(bg);
        //Column 1-B
        JPanel column1B = new JPanel(new FlowLayout(FlowLayout.CENTER, 0,10)); column1B.setOpaque(false);
        bgMute = new JButton(picMute); bgMute.addActionListener(this); bgMute.setPreferredSize(new Dimension(85,85));
        bgMute.setBorderPainted(false); bgMute.setContentAreaFilled(false); bgMute.setFocusPainted(false);
        column1B.add(bgMute);
        column1.add(column1A); column1.add(column1B);

        //Column 2-A
        JPanel column2A = new JPanel(new FlowLayout(FlowLayout.CENTER, 20,40)); column2A.setOpaque(false);
        buttons = new JLabel("Buttons"); buttons.setFont(new Font("Cooper Black", Font.BOLD, 34)); buttons.setForeground(Color.WHITE);
        column2A.add(buttons);
        //Column 1-B
        JPanel column2B = new JPanel(new FlowLayout(FlowLayout.CENTER, 0,0)); column2B.setOpaque(false);
        buttonsMute = new JButton(picMute); buttonsMute.addActionListener(this); buttonsMute.setPreferredSize(new Dimension(85,85));
        buttonsMute.setBorderPainted(false); buttonsMute.setContentAreaFilled(false); buttonsMute.setFocusPainted(false);
        column2B.add(buttonsMute);
        column2.add(column2A); column2.add(column2B);

        //Column 3-A
        JPanel column3A = new JPanel(new FlowLayout(FlowLayout.CENTER, 20,40)); column3A.setOpaque(false);
        playB = new JLabel("Play Buttons"); playB.setFont(new Font("Cooper Black", Font.BOLD, 34)); playB.setForeground(Color.WHITE);
        column3A.add(playB);
        //Column 1-B
        JPanel column3B = new JPanel(new FlowLayout(FlowLayout.CENTER, 0,0)); column3B.setOpaque(false);
        pBMute = new JButton(picMute); pBMute.addActionListener(this); pBMute.setPreferredSize(new Dimension(85,85));
        pBMute.setBorderPainted(false); pBMute.setContentAreaFilled(false); pBMute.setFocusPainted(false);
        column3B.add(pBMute);
        column3.add(column3A); column3.add(column3B);

        //Column 4-A
        JPanel column4A = new JPanel(new FlowLayout(FlowLayout.CENTER, 20,40)); column4A.setOpaque(false);
        fail = new JLabel("Fail Sound"); fail.setFont(new Font("Cooper Black", Font.BOLD, 34)); fail.setForeground(Color.WHITE);
        column4A.add(fail);
        //Column 1-B
        JPanel column4B = new JPanel(new FlowLayout(FlowLayout.CENTER, 0,0)); column4B.setOpaque(false);
        fMute = new JButton(picMute); fMute.addActionListener(this); fMute.setPreferredSize(new Dimension(85,85));
        fMute.setBorderPainted(false); fMute.setContentAreaFilled(false); fMute.setFocusPainted(false);
        column4B.add(fMute);
        column4.add(column4A); column4.add(column4B);

        //Column 5-A
        JPanel column5A = new JPanel(new FlowLayout(FlowLayout.CENTER, 20,40)); column5A.setOpaque(false);
        complete = new JLabel("Complete Sound"); complete.setFont(new Font("Cooper Black", Font.BOLD, 34)); complete.setForeground(Color.WHITE);
        column5A.add(complete);
        //Column 1-B
        JPanel column5B = new JPanel(new FlowLayout(FlowLayout.CENTER, 0,0)); column5B.setOpaque(false);
        cMute = new JButton(picMute); cMute.addActionListener(this); cMute.setPreferredSize(new Dimension(85,85));
        cMute.setBorderPainted(false); cMute.setContentAreaFilled(false); cMute.setFocusPainted(false);
        column5B.add(cMute);
        column5.add(column5A); column5.add(column5B);

        con.add(con1, BorderLayout.SOUTH);

        mainCon.add(forMenu, BorderLayout.NORTH);
        mainCon.add(con, BorderLayout.CENTER);

        forBack.add(mainCon);
        setContentPane(forBack);
        buttonsState();
        this.setVisible(true);
    }

    public void buttonsState(){
        //bgm mute
        if (!Tunog.muted1) bgMute.setIcon(picNotMute);
        if (Tunog.muted1) bgMute.setIcon(picMute);
        //buttons mute
        if (!Tunog.muted3) buttonsMute.setIcon(picNotMute);
        if (Tunog.muted3) buttonsMute.setIcon(picMute);
        //play buttons mute
        if (!Tunog.muted4) pBMute.setIcon(picNotMute);
        if (Tunog.muted4) pBMute.setIcon(picMute);
        //fail mute
        if (!Tunog.muted5) fMute.setIcon(picNotMute);
        if (Tunog.muted5) fMute.setIcon(picMute);
        //solved mute
        if (!Tunog.muted6) cMute.setIcon(picNotMute);
        if (Tunog.muted6) cMute.setIcon(picMute);
    }
    @Override
    public void actionPerformed (ActionEvent e){
        Tunog.playBMusic();
        if(e.getSource() == mainM){
            new Main();
            dispose();
        }
        //BGMusic
        if(e.getSource() == bgMute) {
            Tunog.toggleBGMute();
            Tunog.playPGMusic();
            Tunog.playWinMusic();
            Tunog.playBossMusic();
            Tunog.stopWinMusic();
            Tunog.stopBossMusic();
            Tunog.stopPGMusic();
            Tunog.togglePGMute();
            Tunog.toggleWinMute();
            Tunog.toggleBossMute();

            buttonsState();
        }
        //button sounds mute
        if  (e.getSource() == buttonsMute){
            Tunog.toggleBMute();
            buttonsState();
        }
        //play button sounds mute
        if  (e.getSource() == pBMute){
            Tunog.playPBMusic();
            Tunog.togglePBMute();
            buttonsState();
        }
        //fail sound mute
        if  (e.getSource() == fMute){
            System.out.println("fMute");
            Tunog.playFailMusic();
            Tunog.toggleFailMute();
            buttonsState();
        }
        //solved sound mute
        if  (e.getSource() == cMute){
            Tunog.playSolvedMusic();
            Tunog.toggleSolvedMute();
            buttonsState();
        }
    }

    public static void main (String[] args){
        new Settings();
    }
}

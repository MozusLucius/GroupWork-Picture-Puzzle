import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Puzzle extends JFrame implements ActionListener {
    JPanel  con, leftCon, centerCon, pgC, forIcon, forPauseTitle, forPause, forRestart, forLevels;
    JButton backL, levelsBack, wonLevels, displayBoss, displayBoss2;
    JLabel forBack, oncePaused, iconLabel, forToothless, onceWon, forBasisImage;
    boolean hasFailed = false;
    //from JOptionPanes
    //Classes call
    Game game = new Game(this);
    String [] response1 = {"Next Level", "Replay", "Back to Levels"};
    String [] response2 = {"Replay", "Back to Levels"};
    Levels levels;

    Puzzle(Levels levels){
        forBack = new JLabel(new ImageIcon("src/Coding/GIF/pixelBG.png"));
        forBack.setLayout(new BorderLayout());

        this.levels = levels;
        this.setTitle("Piczzle");
        ImageIcon piku = new ImageIcon("src\\Coding\\piku.png");
        this.setIconImage(piku.getImage());
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setSize(1460, 760);
        this.setLocation(190, 90);
        this.setResizable(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.getContentPane().setBackground(new Color(0xf5b982));
        this.setLayout(new BorderLayout());

        //first Panel for Playground
        con = new JPanel();
        con.setOpaque(false);
        con.setLayout(new BorderLayout());
        //all components in the left
        leftCon = new JPanel();
        leftCon.setBackground(new Color(0x6b215a));
        leftCon.setPreferredSize(new Dimension(480,430));
        leftCon.setLayout(null);
        backL = new JButton(new ImageIcon("src/Coding/Buttons/back.png"));
        backL.setBounds(0,3,90,55);
        backL.setBorderPainted(false); backL.setContentAreaFilled(false); backL.setFocusPainted(false);
        backL.addActionListener(this);
        game.currentLevel.setBounds(150,10,300,55);
        game.currentLevel.setFont(new Font("Arial Rounded MT Bold", Font.PLAIN, 46));
        game.currentLevel.setForeground(Color.WHITE);
        game.basisImage.setBounds(13,200,450,450);
        forBasisImage = new JLabel("Don't forget to click this once you're done!"); forBasisImage.setFont(new Font("Eras Bold ITC", Font.PLAIN, 21)); forBasisImage.setBounds(18,660, 500,35); forBasisImage.setForeground(Color.WHITE);
        game.timeLimit.setFont(new Font("Lucida Console", Font.BOLD, 27));
        game.timeLimit.setForeground(Color.WHITE); game.timeLimit.setBounds(20,160,290,40);
        displayBoss2 = new JButton(new ImageIcon("src/Coding/Buttons/SWP2.png")); displayBoss2.setBounds(100,720, 250,50); displayBoss2.addActionListener(this);
        displayBoss2.setBorderPainted(false); displayBoss2.setContentAreaFilled(false); displayBoss2.setFocusPainted(false);
        leftCon.add(backL);
        leftCon.add(game.currentLevel);
        leftCon.add(game.basisImage);
        leftCon.add(forBasisImage);
        leftCon.add(game.timeLimit);
        //Playground
        centerCon = new JPanel();
        centerCon.setOpaque(false);
        centerCon.setLayout(null);
        game.pause.setFont(new Font("Lucida Console", Font.BOLD, 19));
        game.pause.setBounds(822,74,98,30);
        game.pause.setFocusable(false);
        game.pause.setBackground(new Color(0xfcacac));
        game.pause.addActionListener(this);
        game.timerLabel.setBounds(170,65,100,50);
        game.timerLabel.setFont(new Font("Lucida Console", Font.BOLD, 30));
        game.timerLabel.setBackground(Color.BLACK);
        pgC = new JPanel();
        pgC.setBounds(170,110,750,750);
        pgC.setBackground(Color.BLACK);
        pgC.setLayout(new GridLayout(3,3));
        pgC.add(game.b1); pgC.add(game.b2); pgC.add(game.b3);
        pgC.add(game.b4); pgC.add(game.b5); pgC.add(game.b6);
        pgC.add(game.b7); pgC.add(game.b8); pgC.add(game.b9);

        forIcon = new JPanel(null);
        forIcon.setBackground(new Color(0xbab5a8));
        forIcon.setBounds(960,250,270,310);
        game.icon.setBounds(10,10,250,250);
        iconLabel = new JLabel("Icon");
        iconLabel.setForeground(Color.BLACK);
        iconLabel.setFont(new Font("Georgia", Font.BOLD, 24));
        iconLabel.setBounds(105,275,60,20);
        forIcon.add(game.icon); forIcon.add(iconLabel);

        //all centerCon objects add
        centerCon.add(game.timerLabel); centerCon.add(pgC);
        centerCon.add(game.pause); centerCon.add(forIcon);
        con.add(leftCon, BorderLayout.WEST);
        con.add(centerCon, BorderLayout.CENTER);

        //pause panel window
        oncePaused = new JLabel(new ImageIcon("src/Coding/GIF/GAME PAUSE.png")); oncePaused.setLayout(new GridLayout(0,1));
        forPauseTitle = new JPanel();
        forPause = new JPanel(new FlowLayout(FlowLayout.CENTER));
        forRestart = new JPanel(new FlowLayout(FlowLayout.CENTER));
        forLevels = new JPanel(new FlowLayout(FlowLayout.CENTER));
        forPauseTitle.setOpaque(false); forRestart.setOpaque(false);
        forPause.setOpaque(false); forLevels.setOpaque(false);
        game.resume.setPreferredSize(new Dimension(386,125));
        game.resume.setFont(new Font("Copperplate Gothic Bold", Font.BOLD, 24));
        game.resume.addActionListener(this);
        game.restart.setPreferredSize(new Dimension(386,125));
        game.restart.setFont(new Font("Copperplate Gothic Bold", Font.BOLD, 24));
        game.restart.addActionListener(this);
        levelsBack = new JButton(new ImageIcon("src/Coding/Buttons/leevels.png"));
        levelsBack.setFont(new Font("Copperplate Gothic Bold", Font.BOLD, 24));
        levelsBack.setBorderPainted(false); levelsBack.setContentAreaFilled(false); levelsBack.setFocusPainted(false);
        levelsBack.setPreferredSize(new Dimension(386,125)); levelsBack.addActionListener(this);
        forRestart.add(game.restart); forPause.add(game.resume); forLevels.add(levelsBack);
        oncePaused.add(forPauseTitle);
        oncePaused.add(forPause);
        oncePaused.add(forRestart);
        oncePaused.add(forLevels);

        //Win Panel (Lol)
        onceWon = new JLabel(new ImageIcon("src/Coding/GIF/Winn.png")); onceWon.setLayout(null);
        forToothless = new JLabel(new ImageIcon("src/Coding/toothless.gif")); forToothless.setBounds(550,100,498,413);
        wonLevels = new JButton(new ImageIcon("src/Coding/Buttons/BTL2.png")); wonLevels.setBounds(860,750, 250,50);
        wonLevels.setBorderPainted(false); wonLevels.setContentAreaFilled(false); wonLevels.setFocusPainted(false);
        displayBoss = new JButton(new ImageIcon("src/Coding/Buttons/SBL2.png")); displayBoss.setBounds(460,750, 250,50);
        displayBoss.setBorderPainted(false); displayBoss.setContentAreaFilled(false); displayBoss.setFocusPainted(false);
        displayBoss.addActionListener(this); wonLevels.addActionListener(this);
        onceWon.add(forToothless); onceWon.add(wonLevels); onceWon.add(displayBoss);


        //forBack.add(oncePaused, BorderLayout.CENTER);
        forBack.add(con, BorderLayout.CENTER);
        //forBack.add(onceWon, BorderLayout.CENTER);
        setContentPane(forBack);
        this.setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Tunog.playBMusic();
        if ((e.getSource() == backL) || (e.getSource() == levelsBack) || (e.getSource() == wonLevels)) {
            Game.timer.stop();
            Tunog.stopPGMusic();
            Tunog.stopWinMusic();
            Tunog.stopBossMusic();
            Tunog.playBGMusic();
            new Levels();
            this.dispose();
        }

        if (e.getSource() == game.pause){
            con.setVisible(false);
            forBack.remove(con);
            forBack.add(oncePaused, BorderLayout.CENTER);
            oncePaused.setVisible(true);
            forBack.setVisible(true);
            Tunog.pausePGMusic();
        } else if (e.getSource() == game.resume){
            oncePaused.setVisible(false);
            forBack.remove(oncePaused);
            forBack.add(con, BorderLayout.CENTER);
            con.setVisible(true);
            forBack.setVisible(true);
            Tunog.resumePGMusic();
        } else if (e.getSource() == game.restart ){
            Tunog.resumePGMusic();
            System.out.println("Puzzle Restart button clicked");
            dispose();
        }

        if (e.getSource() == displayBoss){
            onceWon.setVisible(false);
            con.setVisible(true);
            forBack.setVisible(true);
        } else if (e.getSource() == displayBoss2) {
            con.setVisible(false);
            onceWon.setVisible(true);
            forBack.setVisible(true);
        }
    }

    public void ifGameSolved() {
        if (game.solved) {
            Tunog.pausePGMusic();
            Tunog.playSolvedMusic();
            //if conditions to unlock levels automatically
            if (game.currentLevel.getText().equals("Level: 1")){
                Levels.unlock2 = true;
                levels.levelUnlocked();
            } else if (game.currentLevel.getText().equals("Level: 2")){
                Levels.unlock3 = true; // Mark Level 2 as unlocked
                levels.levelUnlocked();
            } else if (game.currentLevel.getText().equals("Level: 3")){
                Levels.unlock4 = true;
                levels.levelUnlocked();
            } else if (game.currentLevel.getText().equals("Level: 4")){
                Levels.unlock5 = true;
                levels.levelUnlocked();
            } else if (game.currentLevel.getText().equals("Level: 5")){
                Tunog.stopBGMusic();
                Tunog.stopPGMusic();
            }
            //JOptionPane pop-up
            int a = JOptionPane.showOptionDialog(this,"<html>You have solved the puzzle in time!<br>Play another level?</html>", "CONGRATULATIONS!!!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null, response1, 0);
            if(a==JOptionPane.YES_OPTION){
                //Next Level
                Tunog.playBMusic();
                Puzzle p = new Puzzle(this.levels);
                Tunog.resumePGMusic();
                game.solved = false;
                if (game.currentLevel.getText().equals("Level: 1")){
                    p.game.Level2();
                } else if (game.currentLevel.getText().equals("Level: 2")){
                    p.game.Level3();
                } else if (game.currentLevel.getText().equals("Level: 3")){
                    p.game.Level4();
                } else if (game.currentLevel.getText().equals("Level: 4")){
                    p.game.Level5();
                } else if (game.currentLevel.getText().equals("Level: 5")){
                    Tunog.stopBGMusic();
                    Tunog.stopPGMusic();
                    p.game.Level6();
                }
                dispose();
            } else if (a==JOptionPane.NO_OPTION){
                //Replay
                Tunog.playBMusic();
                Puzzle p = new Puzzle(this.levels);
                Tunog.resumePGMusic();
                if (game.currentLevel.getText().equals("Level: 1")){
                    p.game.Level1();
                } else if (game.currentLevel.getText().equals("Level: 2")){
                    p.game.Level2();
                } else if (game.currentLevel.getText().equals("Level: 3")){
                    p.game.Level3();
                } else if (game.currentLevel.getText().equals("Level: 4")){
                    p.game.Level4();
                } else if (game.currentLevel.getText().equals("Level: 5")){
                    p.game.Level5();
                }
                dispose();
            } else if (a==JOptionPane.CANCEL_OPTION){
                //Back to Levels
                Tunog.playBMusic();
                Tunog.playBGMusic();
                new Levels();
                dispose();
            }
        }

        if (hasFailed){
            Tunog.pausePGMusic();
            Tunog.playFailMusic();
            game.b1.setEnabled(false); game.b2.setEnabled(false); game.b3.setEnabled(false);
            game.b4.setEnabled(false); game.b5.setEnabled(false); game.b6.setEnabled(false);
            game.b7.setEnabled(false); game.b8.setEnabled(false); game.b9.setEnabled(false);
            game.icon.setEnabled(false); game.pause.setEnabled(false);
            int b = JOptionPane.showOptionDialog(this, "<html>You didn't solve the puzzle in time.<br>Better luck next try.</html>", "TIME'S UP!!!⏰", JOptionPane.YES_NO_OPTION, JOptionPane.ERROR_MESSAGE, null, response2, 0);
            if(b==JOptionPane.YES_OPTION){
                //Replay
                Tunog.playBMusic();
                Tunog.resumePGMusic();
                Puzzle p = new Puzzle(this.levels);
                game.solved = false;
                if (game.currentLevel.getText().equals("Level: 1")){
                    p.game.Level1();
                } else if (game.currentLevel.getText().equals("Level: 2")){
                    p.game.Level2();
                } else if (game.currentLevel.getText().equals("Level: 3")){
                    p.game.Level3();
                } else if (game.currentLevel.getText().equals("Level: 4")){
                    p.game.Level4();
                } else if (game.currentLevel.getText().equals("Level: 5")){
                    p.game.Level5();
                } else if (game.currentLevel.getText().equals("Level: 6")){
                    p.game.Level6();
                }
                dispose();
            } else if(b==JOptionPane.NO_OPTION){
                //Back to Levels
                Tunog.playBMusic();
                Tunog.playBGMusic();
                new Levels();
                dispose();
            }
        }//end of if hasFailed
    }//end of checkIfGameIsSolved

    public void ifGameWin(){
        System.out.println("Game won");
        Tunog.stopBossMusic();
        try {
            Thread.sleep(1000); //delay for suspense lmao
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Tunog.playWinMusic();
        leftCon.add(displayBoss2);
        con.setVisible(false);
        forBack.add(onceWon, BorderLayout.CENTER);
        onceWon.setVisible(true);
        forBack.setVisible(true);
    }
    public static void main (String[] args){
        new Puzzle(null);
    }
}

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
public class Puzzle extends JFrame implements ActionListener{
    JPanel  con, leftCon, centerCon, pgC, forIcon, oncePaused, forPauseTitle, forPause, forRestart, forLevels;
    JButton mainM, levelsBack;
    JLabel title, iconLabel;
    boolean hasFailed = false;
    //Classes call
    Game game = new Game(this);
    Mujik music = new Mujik();

    String [] response = {"New Level", "Back to Levels", "Replay"};

    Puzzle(){

        this.setTitle("Piczzle");
        this.setSize(1460, 760);
        this.setLocation(30, 10);
        this.setResizable(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.getContentPane().setBackground(new Color(0xf5b982));
        this.setLayout(new BorderLayout());

        //first Panel for Playground
        con = new JPanel();
        con.setBackground(new Color(0xf5b982));
        con.setLayout(new BorderLayout());
        //all components in the left
        leftCon = new JPanel();
        leftCon.setBackground(new Color(0xa6784c));
        leftCon.setPreferredSize(new Dimension(430,430));
        leftCon.setLayout(null);
        mainM = new JButton("<html><center>Main<br>Menu</center></html>");
        mainM.setBounds(0,0,90,55);
        mainM.setFocusable(false);
        mainM.setBackground(new Color(0xf5e8a6));
        mainM.setForeground(Color.BLACK);
        mainM.setFont(new Font("Lucida Console", Font.PLAIN, 18));
        mainM.addActionListener(this);
        game.currentLevel.setBounds(130,2,280,70);
        game.currentLevel.setFont(new Font("Georgia", Font.BOLD, 45));
        game.currentLevel.setForeground(Color.BLACK);
        game.basisImage.setBounds(13,150,400,400);
        leftCon.add(mainM);
        leftCon.add(game.currentLevel);
        leftCon.add(game.basisImage);
        //Playground
        centerCon = new JPanel();
        centerCon.setOpaque(false);
        centerCon.setLayout(null);
        game.pause.setFont(new Font("Lucida Console", Font.BOLD, 19));
        game.pause.setBounds(542,74,98,30);
        game.pause.setFocusable(false);
        game.pause.setBackground(new Color(0xfcacac));
        game.pause.addActionListener(this);
        game.timerLabel.setBounds(140,65,100,50);
        game.timerLabel.setFont(new Font("Lucida Console", Font.BOLD, 30));
        game.timerLabel.setBackground(Color.BLACK);
        pgC = new JPanel();
        pgC.setBounds(140,110,500,500);
        pgC.setBackground(Color.BLACK);
        pgC.setLayout(new GridLayout(3,3));
        pgC.add(game.b1); pgC.add(game.b2); pgC.add(game.b3);
        pgC.add(game.b4); pgC.add(game.b5); pgC.add(game.b6);
        pgC.add(game.b7); pgC.add(game.b8); pgC.add(game.b9);

        forIcon = new JPanel(null);
        forIcon.setBackground(new Color(0xbab5a8));
        forIcon.setBounds(680,250,187,227);
//        g.icon.setBounds(700,270,167,167);
        game.icon.setBounds(10,10,167,167);
        iconLabel = new JLabel("Icon");
        iconLabel.setForeground(Color.BLACK);
        iconLabel.setFont(new Font("Georgia", Font.BOLD, 24));
        iconLabel.setBounds(65,187,60,20);
        forIcon.add(game.icon); forIcon.add(iconLabel);

        //all centerCon objects add
        centerCon.add(game.timerLabel); centerCon.add(pgC);
        centerCon.add(game.pause); centerCon.add(forIcon);
        con.add(leftCon, BorderLayout.WEST);
        con.add(centerCon, BorderLayout.CENTER);


        //pause panel window
        oncePaused = new JPanel(new GridLayout(0,1)); oncePaused.setBackground(new Color(0xb3875f));
        forPauseTitle = new JPanel(new FlowLayout(FlowLayout.CENTER,0,70));
        forPause = new JPanel(new FlowLayout(FlowLayout.CENTER));
        forRestart = new JPanel(new FlowLayout(FlowLayout.CENTER));
        forLevels = new JPanel(new FlowLayout(FlowLayout.CENTER));
        forPauseTitle.setOpaque(false); forRestart.setOpaque(false);
        forPause.setOpaque(false); forLevels.setOpaque(false);
        title = new JLabel("GAME PAUSED");
        title.setFont(new Font("Copperplate Gothic Bold", Font.BOLD, 50));
        title.setForeground(Color.BLACK);
        game.resume.setPreferredSize(new Dimension(220,100));
        game.resume.setFont(new Font("Copperplate Gothic Bold", Font.BOLD, 24));
        game.resume.setFocusable(false);
        game.resume.addActionListener(this);
        game.restart.setPreferredSize(new Dimension(220,100));
        game.restart.setFont(new Font("Copperplate Gothic Bold", Font.BOLD, 24));
        game.restart.setFocusable(false);
        game.restart.addActionListener(this);
        levelsBack = new JButton("LEVELS");
        levelsBack.setFont(new Font("Copperplate Gothic Bold", Font.BOLD, 24));
        levelsBack.setFocusable(false);
        levelsBack.setPreferredSize(new Dimension(220,100));
        levelsBack.addActionListener(this);
        forPauseTitle.add(title);   forRestart.add(game.restart);
        forPause.add(game.resume);     forLevels.add(levelsBack);
        oncePaused.add(forPauseTitle);
        oncePaused.add(forPause);
        oncePaused.add(forRestart);
        oncePaused.add(forLevels);

        game.b1.addActionListener(this); game.b2.addActionListener(this); game.b3.addActionListener(this);
        game.b4.addActionListener(this); game.b5.addActionListener(this); game.b6.addActionListener(this);
        game.b7.addActionListener(this); game.b8.addActionListener(this); game.b9.addActionListener(this);

        this.add(oncePaused, BorderLayout.CENTER);
        this.add(con, BorderLayout.CENTER);
        this.setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        System.out.println("Puzzle order: "+game.solved);

        if (e.getSource() == mainM) {
            music.soundButton();
            dispose();
            new Main();
        }
        if (e.getSource() == levelsBack){
            music.soundButton();
            dispose();
            new Levels();
        }

        if (e.getSource() == game.pause){
            music.soundButton();
            con.setVisible(false);
            this.remove(con);
            this.add(oncePaused, BorderLayout.CENTER);
            oncePaused.setVisible(true);
            this.setVisible(true);
        } else if (e.getSource() == game.resume){
            music.soundButton();
            oncePaused.setVisible(false);
            this.remove(oncePaused);
            this.add(con, BorderLayout.CENTER);
            con.setVisible(true);
            this.setVisible(true);
        } else if (e.getSource() == game.restart){
            music.soundButton();
            System.out.println("Puzzle Restart button clicked");
            dispose();
        }
    }

    public void checkIfGameIsSolved() {
        if (game.solved) {
            Game.timer.stop();
            music.soundComplete();
            int a = JOptionPane.showOptionDialog(this,"<html>You have solved the puzzle in time!<br>Play another level?</html>", "CONGRATULATIONS!!!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null, response, 0 );
            game.solved = false;
            if(a==JOptionPane.YES_OPTION){
                dispose();
                Puzzle p = new Puzzle();
                new Game(this);
                if (game.currentLevel.getText().equals("Level: 1")){
                    p.game.Level2();
                } else if (game.currentLevel.getText().equals("Level: 2")){
                    p.game.Level3();
                } else if (game.currentLevel.getText().equals("Level: 3")){
                    p.game.Level4();
                } else if (game.currentLevel.getText().equals("Level: 4")){
                    p.game.Level5();
                } else if (game.currentLevel.getText().equals("Level: 5")){
                    p.game.Level1();
                }
            } else if(a==JOptionPane.NO_OPTION){
                dispose();
                new Levels();
            } else if (a==JOptionPane.CANCEL_OPTION){
                dispose();
                Puzzle p = new Puzzle();
                new Game(this);
                if (game.currentLevel.getText().equals("Level: 1")){
                    p.game.Level1();
                } else if (game.currentLevel.getText().equals("Level: 2")){
                    p.game.Level2();
                } else if (game.currentLevel.getText().equals("Level: 3")){
                    p.game.Level3();
                } else if (game.currentLevel.getText().equals("Level: 4")){
                    p.game.Level4();
                } else if (game.currentLevel.getText().equals("Level: 5")){
                    p.game.Level5();
                }
            }


        }

        if (hasFailed){
            game.b1.setEnabled(false); game.b2.setEnabled(false); game.b3.setEnabled(false);
            game.b4.setEnabled(false); game.b5.setEnabled(false); game.b6.setEnabled(false);
            game.b7.setEnabled(false); game.b8.setEnabled(false); game.b9.setEnabled(false);
            game.icon.setEnabled(false);
            JOptionPane.showMessageDialog(this, "<html>You didn't solve the puzzle in time.<br>Better luck next try.</html>", "TIME'S UP!!!‚è∞", JOptionPane.ERROR_MESSAGE);
        }

    }

    public static void main (String[] args){
        new Puzzle();
    }
}
